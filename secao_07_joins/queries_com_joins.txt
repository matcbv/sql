------------ Sobre ------------

Joins são consultas que abrangem mais de uma tabela, onde na maioria das vezes, possuem ligações entre si. Como resultado, obtemos consultas mais completas, sendo de grande importância em diversos casos.


------------ INNER JOIN ------------

Combina as linhas que têm correspondências em ambas as tabelas. Se não houver correspondência, a linha é excluída do resultado. Ex.:

    SELECT <primary_table_name>.<column_name> <stranger_table>.<column_name>
    FROM <primary_table>
    INNER JOIN <stranger_table>
    ON <primary_table>.<primary_key> = <stranger_table>.<stranger_key>;

A coluna que iremos utilizar no FROM será nossa tabela que contém os registros principais que desejamos ver, mesmo que não haja correspondências na outra tabela. Já a utilizada com nossos JOINS, será a tabela complementar, onde serão feitas as consultas com relação à tabela principal (Tabela do FROM).

Obs.: Ao utilizar somente JOIN, o MySQL interpretará com um INNER JOIN.


------------ LEFT JOIN ------------

Retorna todas as linhas da tabela da esquerda (primeira tabela). Se houver correspondência na tabela da direita (segunda tabela), os dados são combinados, caso contrário, os campos da tabela da direita aparecem como NULL.

    SELECT <first_table>.<column_name>, <second_table>.<column_name>
    FROM <first_table>
    LEFT JOIN <second_table>
    ON <first_table>.<primary_key> = <second_table>.<stranger_key>;


------------ RIGHT JOIN ------------

Retorna todas as linhas da tabela da direita (segunda tabela). Se houver correspondência na tabela da esquerda (primeira tabela), os dados são combinados, caso contrário, os campos da tabela da esquerda aparecem como NULL.

    SELECT <first_table>.<column_name>, <second_table>.<column_name>
    FROM <first_table>
    RIGTH JOIN <second_table>
    ON <first_table>.<primary_key> = <second_table>.<stranger_key>;

Obs.: Com INNER JOIN e LEFT JOIN, as linhas sem valor serão retornada como NULL.


------------ CONCATENAÇÃO DE JOINS ------------

Para utilizarmos mais de uma tabela no JOIN, basta utilizarmos JOIN's concatenados em nossa querie. Ex.:

    SELECT <first_table>.<column_name>, <second_table>.<column_name>, <third_table>.<column_name>
    FROM <first_table>
    INNER JOIN <second_table>
    ON <first_table>.<primary_key> = <second_table>.<stranger_key>
    INNER JOIN <third_table>
    ON <first/second_table>.<primary_key> = <third_table>.<stranger_key>;